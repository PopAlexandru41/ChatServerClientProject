/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace ThriftTechChat.Networking
{

  public partial class Message : TBase
  {
    private string _IdMessage;
    private string _ExpedationDate;
    private string _Content;
    private string _IdChat;
    private string _NameOfShipper;

    public string IdMessage
    {
      get
      {
        return _IdMessage;
      }
      set
      {
        __isset.IdMessage = true;
        this._IdMessage = value;
      }
    }

    public string ExpedationDate
    {
      get
      {
        return _ExpedationDate;
      }
      set
      {
        __isset.ExpedationDate = true;
        this._ExpedationDate = value;
      }
    }

    public string Content
    {
      get
      {
        return _Content;
      }
      set
      {
        __isset.Content = true;
        this._Content = value;
      }
    }

    public string IdChat
    {
      get
      {
        return _IdChat;
      }
      set
      {
        __isset.IdChat = true;
        this._IdChat = value;
      }
    }

    public string NameOfShipper
    {
      get
      {
        return _NameOfShipper;
      }
      set
      {
        __isset.NameOfShipper = true;
        this._NameOfShipper = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool IdMessage;
      public bool ExpedationDate;
      public bool Content;
      public bool IdChat;
      public bool NameOfShipper;
    }

    public Message()
    {
    }

    public Message DeepCopy()
    {
      var tmp5 = new Message();
      if((IdMessage != null) && __isset.IdMessage)
      {
        tmp5.IdMessage = this.IdMessage;
      }
      tmp5.__isset.IdMessage = this.__isset.IdMessage;
      if((ExpedationDate != null) && __isset.ExpedationDate)
      {
        tmp5.ExpedationDate = this.ExpedationDate;
      }
      tmp5.__isset.ExpedationDate = this.__isset.ExpedationDate;
      if((Content != null) && __isset.Content)
      {
        tmp5.Content = this.Content;
      }
      tmp5.__isset.Content = this.__isset.Content;
      if((IdChat != null) && __isset.IdChat)
      {
        tmp5.IdChat = this.IdChat;
      }
      tmp5.__isset.IdChat = this.__isset.IdChat;
      if((NameOfShipper != null) && __isset.NameOfShipper)
      {
        tmp5.NameOfShipper = this.NameOfShipper;
      }
      tmp5.__isset.NameOfShipper = this.__isset.NameOfShipper;
      return tmp5;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                IdMessage = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                ExpedationDate = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                Content = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.String)
              {
                IdChat = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.String)
              {
                NameOfShipper = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp6 = new TStruct("Message");
        await oprot.WriteStructBeginAsync(tmp6, cancellationToken);
        var tmp7 = new TField();
        if((IdMessage != null) && __isset.IdMessage)
        {
          tmp7.Name = "IdMessage";
          tmp7.Type = TType.String;
          tmp7.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp7, cancellationToken);
          await oprot.WriteStringAsync(IdMessage, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((ExpedationDate != null) && __isset.ExpedationDate)
        {
          tmp7.Name = "ExpedationDate";
          tmp7.Type = TType.String;
          tmp7.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp7, cancellationToken);
          await oprot.WriteStringAsync(ExpedationDate, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Content != null) && __isset.Content)
        {
          tmp7.Name = "Content";
          tmp7.Type = TType.String;
          tmp7.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp7, cancellationToken);
          await oprot.WriteStringAsync(Content, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((IdChat != null) && __isset.IdChat)
        {
          tmp7.Name = "IdChat";
          tmp7.Type = TType.String;
          tmp7.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp7, cancellationToken);
          await oprot.WriteStringAsync(IdChat, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((NameOfShipper != null) && __isset.NameOfShipper)
        {
          tmp7.Name = "NameOfShipper";
          tmp7.Type = TType.String;
          tmp7.ID = 5;
          await oprot.WriteFieldBeginAsync(tmp7, cancellationToken);
          await oprot.WriteStringAsync(NameOfShipper, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is Message other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.IdMessage == other.__isset.IdMessage) && ((!__isset.IdMessage) || (global::System.Object.Equals(IdMessage, other.IdMessage))))
        && ((__isset.ExpedationDate == other.__isset.ExpedationDate) && ((!__isset.ExpedationDate) || (global::System.Object.Equals(ExpedationDate, other.ExpedationDate))))
        && ((__isset.Content == other.__isset.Content) && ((!__isset.Content) || (global::System.Object.Equals(Content, other.Content))))
        && ((__isset.IdChat == other.__isset.IdChat) && ((!__isset.IdChat) || (global::System.Object.Equals(IdChat, other.IdChat))))
        && ((__isset.NameOfShipper == other.__isset.NameOfShipper) && ((!__isset.NameOfShipper) || (global::System.Object.Equals(NameOfShipper, other.NameOfShipper))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((IdMessage != null) && __isset.IdMessage)
        {
          hashcode = (hashcode * 397) + IdMessage.GetHashCode();
        }
        if((ExpedationDate != null) && __isset.ExpedationDate)
        {
          hashcode = (hashcode * 397) + ExpedationDate.GetHashCode();
        }
        if((Content != null) && __isset.Content)
        {
          hashcode = (hashcode * 397) + Content.GetHashCode();
        }
        if((IdChat != null) && __isset.IdChat)
        {
          hashcode = (hashcode * 397) + IdChat.GetHashCode();
        }
        if((NameOfShipper != null) && __isset.NameOfShipper)
        {
          hashcode = (hashcode * 397) + NameOfShipper.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp8 = new StringBuilder("Message(");
      int tmp9 = 0;
      if((IdMessage != null) && __isset.IdMessage)
      {
        if(0 < tmp9++) { tmp8.Append(", "); }
        tmp8.Append("IdMessage: ");
        IdMessage.ToString(tmp8);
      }
      if((ExpedationDate != null) && __isset.ExpedationDate)
      {
        if(0 < tmp9++) { tmp8.Append(", "); }
        tmp8.Append("ExpedationDate: ");
        ExpedationDate.ToString(tmp8);
      }
      if((Content != null) && __isset.Content)
      {
        if(0 < tmp9++) { tmp8.Append(", "); }
        tmp8.Append("Content: ");
        Content.ToString(tmp8);
      }
      if((IdChat != null) && __isset.IdChat)
      {
        if(0 < tmp9++) { tmp8.Append(", "); }
        tmp8.Append("IdChat: ");
        IdChat.ToString(tmp8);
      }
      if((NameOfShipper != null) && __isset.NameOfShipper)
      {
        if(0 < tmp9++) { tmp8.Append(", "); }
        tmp8.Append("NameOfShipper: ");
        NameOfShipper.ToString(tmp8);
      }
      tmp8.Append(')');
      return tmp8.ToString();
    }
  }

}
