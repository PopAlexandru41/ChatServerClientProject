/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace ThriftTechChat.Networking
{

  public partial class UserInChat : TBase
  {
    private string _IdUserInChat;
    private string _IdUser;
    private string _IdChat;
    private int _NewMessagesInChat;
    private bool _IsMuted;

    public string IdUserInChat
    {
      get
      {
        return _IdUserInChat;
      }
      set
      {
        __isset.IdUserInChat = true;
        this._IdUserInChat = value;
      }
    }

    public string IdUser
    {
      get
      {
        return _IdUser;
      }
      set
      {
        __isset.IdUser = true;
        this._IdUser = value;
      }
    }

    public string IdChat
    {
      get
      {
        return _IdChat;
      }
      set
      {
        __isset.IdChat = true;
        this._IdChat = value;
      }
    }

    public int NewMessagesInChat
    {
      get
      {
        return _NewMessagesInChat;
      }
      set
      {
        __isset.NewMessagesInChat = true;
        this._NewMessagesInChat = value;
      }
    }

    public bool IsMuted
    {
      get
      {
        return _IsMuted;
      }
      set
      {
        __isset.IsMuted = true;
        this._IsMuted = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool IdUserInChat;
      public bool IdUser;
      public bool IdChat;
      public bool NewMessagesInChat;
      public bool IsMuted;
    }

    public UserInChat()
    {
    }

    public UserInChat DeepCopy()
    {
      var tmp25 = new UserInChat();
      if((IdUserInChat != null) && __isset.IdUserInChat)
      {
        tmp25.IdUserInChat = this.IdUserInChat;
      }
      tmp25.__isset.IdUserInChat = this.__isset.IdUserInChat;
      if((IdUser != null) && __isset.IdUser)
      {
        tmp25.IdUser = this.IdUser;
      }
      tmp25.__isset.IdUser = this.__isset.IdUser;
      if((IdChat != null) && __isset.IdChat)
      {
        tmp25.IdChat = this.IdChat;
      }
      tmp25.__isset.IdChat = this.__isset.IdChat;
      if(__isset.NewMessagesInChat)
      {
        tmp25.NewMessagesInChat = this.NewMessagesInChat;
      }
      tmp25.__isset.NewMessagesInChat = this.__isset.NewMessagesInChat;
      if(__isset.IsMuted)
      {
        tmp25.IsMuted = this.IsMuted;
      }
      tmp25.__isset.IsMuted = this.__isset.IsMuted;
      return tmp25;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                IdUserInChat = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                IdUser = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                IdChat = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.I32)
              {
                NewMessagesInChat = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.Bool)
              {
                IsMuted = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp26 = new TStruct("UserInChat");
        await oprot.WriteStructBeginAsync(tmp26, cancellationToken);
        var tmp27 = new TField();
        if((IdUserInChat != null) && __isset.IdUserInChat)
        {
          tmp27.Name = "IdUserInChat";
          tmp27.Type = TType.String;
          tmp27.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp27, cancellationToken);
          await oprot.WriteStringAsync(IdUserInChat, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((IdUser != null) && __isset.IdUser)
        {
          tmp27.Name = "IdUser";
          tmp27.Type = TType.String;
          tmp27.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp27, cancellationToken);
          await oprot.WriteStringAsync(IdUser, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((IdChat != null) && __isset.IdChat)
        {
          tmp27.Name = "IdChat";
          tmp27.Type = TType.String;
          tmp27.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp27, cancellationToken);
          await oprot.WriteStringAsync(IdChat, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.NewMessagesInChat)
        {
          tmp27.Name = "NewMessagesInChat";
          tmp27.Type = TType.I32;
          tmp27.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp27, cancellationToken);
          await oprot.WriteI32Async(NewMessagesInChat, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.IsMuted)
        {
          tmp27.Name = "IsMuted";
          tmp27.Type = TType.Bool;
          tmp27.ID = 5;
          await oprot.WriteFieldBeginAsync(tmp27, cancellationToken);
          await oprot.WriteBoolAsync(IsMuted, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is UserInChat other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.IdUserInChat == other.__isset.IdUserInChat) && ((!__isset.IdUserInChat) || (global::System.Object.Equals(IdUserInChat, other.IdUserInChat))))
        && ((__isset.IdUser == other.__isset.IdUser) && ((!__isset.IdUser) || (global::System.Object.Equals(IdUser, other.IdUser))))
        && ((__isset.IdChat == other.__isset.IdChat) && ((!__isset.IdChat) || (global::System.Object.Equals(IdChat, other.IdChat))))
        && ((__isset.NewMessagesInChat == other.__isset.NewMessagesInChat) && ((!__isset.NewMessagesInChat) || (global::System.Object.Equals(NewMessagesInChat, other.NewMessagesInChat))))
        && ((__isset.IsMuted == other.__isset.IsMuted) && ((!__isset.IsMuted) || (global::System.Object.Equals(IsMuted, other.IsMuted))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((IdUserInChat != null) && __isset.IdUserInChat)
        {
          hashcode = (hashcode * 397) + IdUserInChat.GetHashCode();
        }
        if((IdUser != null) && __isset.IdUser)
        {
          hashcode = (hashcode * 397) + IdUser.GetHashCode();
        }
        if((IdChat != null) && __isset.IdChat)
        {
          hashcode = (hashcode * 397) + IdChat.GetHashCode();
        }
        if(__isset.NewMessagesInChat)
        {
          hashcode = (hashcode * 397) + NewMessagesInChat.GetHashCode();
        }
        if(__isset.IsMuted)
        {
          hashcode = (hashcode * 397) + IsMuted.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp28 = new StringBuilder("UserInChat(");
      int tmp29 = 0;
      if((IdUserInChat != null) && __isset.IdUserInChat)
      {
        if(0 < tmp29++) { tmp28.Append(", "); }
        tmp28.Append("IdUserInChat: ");
        IdUserInChat.ToString(tmp28);
      }
      if((IdUser != null) && __isset.IdUser)
      {
        if(0 < tmp29++) { tmp28.Append(", "); }
        tmp28.Append("IdUser: ");
        IdUser.ToString(tmp28);
      }
      if((IdChat != null) && __isset.IdChat)
      {
        if(0 < tmp29++) { tmp28.Append(", "); }
        tmp28.Append("IdChat: ");
        IdChat.ToString(tmp28);
      }
      if(__isset.NewMessagesInChat)
      {
        if(0 < tmp29++) { tmp28.Append(", "); }
        tmp28.Append("NewMessagesInChat: ");
        NewMessagesInChat.ToString(tmp28);
      }
      if(__isset.IsMuted)
      {
        if(0 < tmp29++) { tmp28.Append(", "); }
        tmp28.Append("IsMuted: ");
        IsMuted.ToString(tmp28);
      }
      tmp28.Append(')');
      return tmp28.ToString();
    }
  }

}
