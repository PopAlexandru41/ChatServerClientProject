/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace ThriftTechChat.Networking
{
  public partial class Service
  {
    public interface IAsync
    {
      global::System.Threading.Tasks.Task<global::ThriftTechChat.Networking.User> Login(string name, string password, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<bool> Logout(string idUser, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::ThriftTechChat.Networking.User> AddNewUser(string name, string password, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<List<global::ThriftTechChat.Networking.Chat>> GetChatsFromUser(string idUser, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<List<global::ThriftTechChat.Networking.Message>> GetMessagesFromChat(string idChat, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<List<global::ThriftTechChat.Networking.UserInChat>> GetUserInChatFromUser(string idUser, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<bool> AddNewMessage(string messageContent, string idChat, string nameOfShipper, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<bool> AddNewFriendRequest(string idUser, string nameOfFriend, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<bool> SetNewMessagesInChatTo0(string idUser, string idChat, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<bool> AcceptFriendRequest(string idToUser, string idFromUser, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<bool> DenyFriendRequest(string idToUser, string idFromUser, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<List<global::ThriftTechChat.Networking.User>> GetFromUsersInFriendRequestFromUser(string idUser, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<bool> IsMutedChangeFromAnUserInAChat(string idUser, string idChat, CancellationToken cancellationToken = default);

    }


    public class Client : TBaseClient, IDisposable, IAsync
    {
      public Client(TProtocol protocol) : this(protocol, protocol)
      {
      }

      public Client(TProtocol inputProtocol, TProtocol outputProtocol) : base(inputProtocol, outputProtocol)
      {
      }

      public async global::System.Threading.Tasks.Task<global::ThriftTechChat.Networking.User> Login(string name, string password, CancellationToken cancellationToken = default)
      {
        await send_Login(name, password, cancellationToken);
        return await recv_Login(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_Login(string name, string password, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Login", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp35 = new InternalStructs.Login_args() {
          Name = name,
          Password = password,
        };
        
        await tmp35.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::ThriftTechChat.Networking.User> recv_Login(CancellationToken cancellationToken = default)
      {
        
        var tmp36 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp36.Type == TMessageType.Exception)
        {
          var tmp37 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp37;
        }

        var tmp38 = new InternalStructs.Login_result();
        await tmp38.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp38.__isset.success)
        {
          return tmp38.Success;
        }
        if (tmp38.__isset.e)
        {
          throw tmp38.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Login failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<bool> Logout(string idUser, CancellationToken cancellationToken = default)
      {
        await send_Logout(idUser, cancellationToken);
        return await recv_Logout(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_Logout(string idUser, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Logout", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp39 = new InternalStructs.Logout_args() {
          IdUser = idUser,
        };
        
        await tmp39.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_Logout(CancellationToken cancellationToken = default)
      {
        
        var tmp40 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp40.Type == TMessageType.Exception)
        {
          var tmp41 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp41;
        }

        var tmp42 = new InternalStructs.Logout_result();
        await tmp42.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp42.__isset.success)
        {
          return tmp42.Success;
        }
        if (tmp42.__isset.e)
        {
          throw tmp42.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Logout failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::ThriftTechChat.Networking.User> AddNewUser(string name, string password, CancellationToken cancellationToken = default)
      {
        await send_AddNewUser(name, password, cancellationToken);
        return await recv_AddNewUser(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_AddNewUser(string name, string password, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("AddNewUser", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp43 = new InternalStructs.AddNewUser_args() {
          Name = name,
          Password = password,
        };
        
        await tmp43.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::ThriftTechChat.Networking.User> recv_AddNewUser(CancellationToken cancellationToken = default)
      {
        
        var tmp44 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp44.Type == TMessageType.Exception)
        {
          var tmp45 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp45;
        }

        var tmp46 = new InternalStructs.AddNewUser_result();
        await tmp46.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp46.__isset.success)
        {
          return tmp46.Success;
        }
        if (tmp46.__isset.e)
        {
          throw tmp46.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "AddNewUser failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<List<global::ThriftTechChat.Networking.Chat>> GetChatsFromUser(string idUser, CancellationToken cancellationToken = default)
      {
        await send_GetChatsFromUser(idUser, cancellationToken);
        return await recv_GetChatsFromUser(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_GetChatsFromUser(string idUser, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetChatsFromUser", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp47 = new InternalStructs.GetChatsFromUser_args() {
          IdUser = idUser,
        };
        
        await tmp47.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<List<global::ThriftTechChat.Networking.Chat>> recv_GetChatsFromUser(CancellationToken cancellationToken = default)
      {
        
        var tmp48 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp48.Type == TMessageType.Exception)
        {
          var tmp49 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp49;
        }

        var tmp50 = new InternalStructs.GetChatsFromUser_result();
        await tmp50.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp50.__isset.success)
        {
          return tmp50.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetChatsFromUser failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<List<global::ThriftTechChat.Networking.Message>> GetMessagesFromChat(string idChat, CancellationToken cancellationToken = default)
      {
        await send_GetMessagesFromChat(idChat, cancellationToken);
        return await recv_GetMessagesFromChat(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_GetMessagesFromChat(string idChat, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetMessagesFromChat", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp51 = new InternalStructs.GetMessagesFromChat_args() {
          IdChat = idChat,
        };
        
        await tmp51.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<List<global::ThriftTechChat.Networking.Message>> recv_GetMessagesFromChat(CancellationToken cancellationToken = default)
      {
        
        var tmp52 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp52.Type == TMessageType.Exception)
        {
          var tmp53 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp53;
        }

        var tmp54 = new InternalStructs.GetMessagesFromChat_result();
        await tmp54.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp54.__isset.success)
        {
          return tmp54.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetMessagesFromChat failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<List<global::ThriftTechChat.Networking.UserInChat>> GetUserInChatFromUser(string idUser, CancellationToken cancellationToken = default)
      {
        await send_GetUserInChatFromUser(idUser, cancellationToken);
        return await recv_GetUserInChatFromUser(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_GetUserInChatFromUser(string idUser, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetUserInChatFromUser", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp55 = new InternalStructs.GetUserInChatFromUser_args() {
          IdUser = idUser,
        };
        
        await tmp55.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<List<global::ThriftTechChat.Networking.UserInChat>> recv_GetUserInChatFromUser(CancellationToken cancellationToken = default)
      {
        
        var tmp56 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp56.Type == TMessageType.Exception)
        {
          var tmp57 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp57;
        }

        var tmp58 = new InternalStructs.GetUserInChatFromUser_result();
        await tmp58.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp58.__isset.success)
        {
          return tmp58.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetUserInChatFromUser failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<bool> AddNewMessage(string messageContent, string idChat, string nameOfShipper, CancellationToken cancellationToken = default)
      {
        await send_AddNewMessage(messageContent, idChat, nameOfShipper, cancellationToken);
        return await recv_AddNewMessage(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_AddNewMessage(string messageContent, string idChat, string nameOfShipper, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("AddNewMessage", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp59 = new InternalStructs.AddNewMessage_args() {
          MessageContent = messageContent,
          IdChat = idChat,
          NameOfShipper = nameOfShipper,
        };
        
        await tmp59.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_AddNewMessage(CancellationToken cancellationToken = default)
      {
        
        var tmp60 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp60.Type == TMessageType.Exception)
        {
          var tmp61 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp61;
        }

        var tmp62 = new InternalStructs.AddNewMessage_result();
        await tmp62.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp62.__isset.success)
        {
          return tmp62.Success;
        }
        if (tmp62.__isset.e)
        {
          throw tmp62.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "AddNewMessage failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<bool> AddNewFriendRequest(string idUser, string nameOfFriend, CancellationToken cancellationToken = default)
      {
        await send_AddNewFriendRequest(idUser, nameOfFriend, cancellationToken);
        return await recv_AddNewFriendRequest(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_AddNewFriendRequest(string idUser, string nameOfFriend, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("AddNewFriendRequest", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp63 = new InternalStructs.AddNewFriendRequest_args() {
          IdUser = idUser,
          NameOfFriend = nameOfFriend,
        };
        
        await tmp63.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_AddNewFriendRequest(CancellationToken cancellationToken = default)
      {
        
        var tmp64 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp64.Type == TMessageType.Exception)
        {
          var tmp65 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp65;
        }

        var tmp66 = new InternalStructs.AddNewFriendRequest_result();
        await tmp66.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp66.__isset.success)
        {
          return tmp66.Success;
        }
        if (tmp66.__isset.e)
        {
          throw tmp66.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "AddNewFriendRequest failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<bool> SetNewMessagesInChatTo0(string idUser, string idChat, CancellationToken cancellationToken = default)
      {
        await send_SetNewMessagesInChatTo0(idUser, idChat, cancellationToken);
        return await recv_SetNewMessagesInChatTo0(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_SetNewMessagesInChatTo0(string idUser, string idChat, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("SetNewMessagesInChatTo0", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp67 = new InternalStructs.SetNewMessagesInChatTo0_args() {
          IdUser = idUser,
          IdChat = idChat,
        };
        
        await tmp67.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_SetNewMessagesInChatTo0(CancellationToken cancellationToken = default)
      {
        
        var tmp68 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp68.Type == TMessageType.Exception)
        {
          var tmp69 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp69;
        }

        var tmp70 = new InternalStructs.SetNewMessagesInChatTo0_result();
        await tmp70.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp70.__isset.success)
        {
          return tmp70.Success;
        }
        if (tmp70.__isset.e)
        {
          throw tmp70.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SetNewMessagesInChatTo0 failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<bool> AcceptFriendRequest(string idToUser, string idFromUser, CancellationToken cancellationToken = default)
      {
        await send_AcceptFriendRequest(idToUser, idFromUser, cancellationToken);
        return await recv_AcceptFriendRequest(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_AcceptFriendRequest(string idToUser, string idFromUser, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("AcceptFriendRequest", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp71 = new InternalStructs.AcceptFriendRequest_args() {
          IdToUser = idToUser,
          IdFromUser = idFromUser,
        };
        
        await tmp71.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_AcceptFriendRequest(CancellationToken cancellationToken = default)
      {
        
        var tmp72 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp72.Type == TMessageType.Exception)
        {
          var tmp73 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp73;
        }

        var tmp74 = new InternalStructs.AcceptFriendRequest_result();
        await tmp74.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp74.__isset.success)
        {
          return tmp74.Success;
        }
        if (tmp74.__isset.e)
        {
          throw tmp74.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "AcceptFriendRequest failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<bool> DenyFriendRequest(string idToUser, string idFromUser, CancellationToken cancellationToken = default)
      {
        await send_DenyFriendRequest(idToUser, idFromUser, cancellationToken);
        return await recv_DenyFriendRequest(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_DenyFriendRequest(string idToUser, string idFromUser, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("DenyFriendRequest", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp75 = new InternalStructs.DenyFriendRequest_args() {
          IdToUser = idToUser,
          IdFromUser = idFromUser,
        };
        
        await tmp75.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_DenyFriendRequest(CancellationToken cancellationToken = default)
      {
        
        var tmp76 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp76.Type == TMessageType.Exception)
        {
          var tmp77 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp77;
        }

        var tmp78 = new InternalStructs.DenyFriendRequest_result();
        await tmp78.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp78.__isset.success)
        {
          return tmp78.Success;
        }
        if (tmp78.__isset.e)
        {
          throw tmp78.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "DenyFriendRequest failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<List<global::ThriftTechChat.Networking.User>> GetFromUsersInFriendRequestFromUser(string idUser, CancellationToken cancellationToken = default)
      {
        await send_GetFromUsersInFriendRequestFromUser(idUser, cancellationToken);
        return await recv_GetFromUsersInFriendRequestFromUser(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_GetFromUsersInFriendRequestFromUser(string idUser, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetFromUsersInFriendRequestFromUser", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp79 = new InternalStructs.GetFromUsersInFriendRequestFromUser_args() {
          IdUser = idUser,
        };
        
        await tmp79.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<List<global::ThriftTechChat.Networking.User>> recv_GetFromUsersInFriendRequestFromUser(CancellationToken cancellationToken = default)
      {
        
        var tmp80 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp80.Type == TMessageType.Exception)
        {
          var tmp81 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp81;
        }

        var tmp82 = new InternalStructs.GetFromUsersInFriendRequestFromUser_result();
        await tmp82.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp82.__isset.success)
        {
          return tmp82.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetFromUsersInFriendRequestFromUser failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<bool> IsMutedChangeFromAnUserInAChat(string idUser, string idChat, CancellationToken cancellationToken = default)
      {
        await send_IsMutedChangeFromAnUserInAChat(idUser, idChat, cancellationToken);
        return await recv_IsMutedChangeFromAnUserInAChat(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_IsMutedChangeFromAnUserInAChat(string idUser, string idChat, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("IsMutedChangeFromAnUserInAChat", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp83 = new InternalStructs.IsMutedChangeFromAnUserInAChat_args() {
          IdUser = idUser,
          IdChat = idChat,
        };
        
        await tmp83.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_IsMutedChangeFromAnUserInAChat(CancellationToken cancellationToken = default)
      {
        
        var tmp84 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp84.Type == TMessageType.Exception)
        {
          var tmp85 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp85;
        }

        var tmp86 = new InternalStructs.IsMutedChangeFromAnUserInAChat_result();
        await tmp86.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp86.__isset.success)
        {
          return tmp86.Success;
        }
        if (tmp86.__isset.e)
        {
          throw tmp86.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "IsMutedChangeFromAnUserInAChat failed: unknown result");
      }

    }

    public class AsyncProcessor : ITAsyncProcessor
    {
      private readonly IAsync _iAsync;
      private readonly ILogger<AsyncProcessor> _logger;

      public AsyncProcessor(IAsync iAsync, ILogger<AsyncProcessor> logger = default)
      {
        _iAsync = iAsync ?? throw new ArgumentNullException(nameof(iAsync));
        _logger = logger;
        processMap_["Login"] = Login_ProcessAsync;
        processMap_["Logout"] = Logout_ProcessAsync;
        processMap_["AddNewUser"] = AddNewUser_ProcessAsync;
        processMap_["GetChatsFromUser"] = GetChatsFromUser_ProcessAsync;
        processMap_["GetMessagesFromChat"] = GetMessagesFromChat_ProcessAsync;
        processMap_["GetUserInChatFromUser"] = GetUserInChatFromUser_ProcessAsync;
        processMap_["AddNewMessage"] = AddNewMessage_ProcessAsync;
        processMap_["AddNewFriendRequest"] = AddNewFriendRequest_ProcessAsync;
        processMap_["SetNewMessagesInChatTo0"] = SetNewMessagesInChatTo0_ProcessAsync;
        processMap_["AcceptFriendRequest"] = AcceptFriendRequest_ProcessAsync;
        processMap_["DenyFriendRequest"] = DenyFriendRequest_ProcessAsync;
        processMap_["GetFromUsersInFriendRequestFromUser"] = GetFromUsersInFriendRequestFromUser_ProcessAsync;
        processMap_["IsMutedChangeFromAnUserInAChat"] = IsMutedChangeFromAnUserInAChat_ProcessAsync;
      }

      protected delegate global::System.Threading.Tasks.Task ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken);
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot)
      {
        return await ProcessAsync(iprot, oprot, CancellationToken.None);
      }

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        try
        {
          var msg = await iprot.ReadMessageBeginAsync(cancellationToken);

          processMap_.TryGetValue(msg.Name, out ProcessFunction fn);

          if (fn == null)
          {
            await TProtocolUtil.SkipAsync(iprot, TType.Struct, cancellationToken);
            await iprot.ReadMessageEndAsync(cancellationToken);
            var x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            await oprot.WriteMessageBeginAsync(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID), cancellationToken);
            await x.WriteAsync(oprot, cancellationToken);
            await oprot.WriteMessageEndAsync(cancellationToken);
            await oprot.Transport.FlushAsync(cancellationToken);
            return true;
          }

          await fn(msg.SeqID, iprot, oprot, cancellationToken);

        }
        catch (IOException)
        {
          return false;
        }

        return true;
      }

      public async global::System.Threading.Tasks.Task Login_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp87 = new InternalStructs.Login_args();
        await tmp87.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp88 = new InternalStructs.Login_result();
        try
        {
          try
          {
            tmp88.Success = await _iAsync.Login(tmp87.Name, tmp87.Password, cancellationToken);
          }
          catch (global::ThriftTechChat.Networking.ChatException tmp89)
          {
            tmp88.E = tmp89;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("Login", TMessageType.Reply, seqid), cancellationToken); 
          await tmp88.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp90)
        {
          var tmp91 = $"Error occurred in {GetType().FullName}: {tmp90.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp90, tmp91);
          else
            Console.Error.WriteLine(tmp91);
          var tmp92 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Login", TMessageType.Exception, seqid), cancellationToken);
          await tmp92.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task Logout_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp93 = new InternalStructs.Logout_args();
        await tmp93.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp94 = new InternalStructs.Logout_result();
        try
        {
          try
          {
            tmp94.Success = await _iAsync.Logout(tmp93.IdUser, cancellationToken);
          }
          catch (global::ThriftTechChat.Networking.ChatException tmp95)
          {
            tmp94.E = tmp95;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("Logout", TMessageType.Reply, seqid), cancellationToken); 
          await tmp94.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp96)
        {
          var tmp97 = $"Error occurred in {GetType().FullName}: {tmp96.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp96, tmp97);
          else
            Console.Error.WriteLine(tmp97);
          var tmp98 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Logout", TMessageType.Exception, seqid), cancellationToken);
          await tmp98.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task AddNewUser_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp99 = new InternalStructs.AddNewUser_args();
        await tmp99.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp100 = new InternalStructs.AddNewUser_result();
        try
        {
          try
          {
            tmp100.Success = await _iAsync.AddNewUser(tmp99.Name, tmp99.Password, cancellationToken);
          }
          catch (global::ThriftTechChat.Networking.ChatException tmp101)
          {
            tmp100.E = tmp101;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("AddNewUser", TMessageType.Reply, seqid), cancellationToken); 
          await tmp100.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp102)
        {
          var tmp103 = $"Error occurred in {GetType().FullName}: {tmp102.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp102, tmp103);
          else
            Console.Error.WriteLine(tmp103);
          var tmp104 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("AddNewUser", TMessageType.Exception, seqid), cancellationToken);
          await tmp104.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task GetChatsFromUser_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp105 = new InternalStructs.GetChatsFromUser_args();
        await tmp105.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp106 = new InternalStructs.GetChatsFromUser_result();
        try
        {
          tmp106.Success = await _iAsync.GetChatsFromUser(tmp105.IdUser, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("GetChatsFromUser", TMessageType.Reply, seqid), cancellationToken); 
          await tmp106.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp107)
        {
          var tmp108 = $"Error occurred in {GetType().FullName}: {tmp107.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp107, tmp108);
          else
            Console.Error.WriteLine(tmp108);
          var tmp109 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GetChatsFromUser", TMessageType.Exception, seqid), cancellationToken);
          await tmp109.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task GetMessagesFromChat_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp110 = new InternalStructs.GetMessagesFromChat_args();
        await tmp110.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp111 = new InternalStructs.GetMessagesFromChat_result();
        try
        {
          tmp111.Success = await _iAsync.GetMessagesFromChat(tmp110.IdChat, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("GetMessagesFromChat", TMessageType.Reply, seqid), cancellationToken); 
          await tmp111.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp112)
        {
          var tmp113 = $"Error occurred in {GetType().FullName}: {tmp112.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp112, tmp113);
          else
            Console.Error.WriteLine(tmp113);
          var tmp114 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GetMessagesFromChat", TMessageType.Exception, seqid), cancellationToken);
          await tmp114.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task GetUserInChatFromUser_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp115 = new InternalStructs.GetUserInChatFromUser_args();
        await tmp115.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp116 = new InternalStructs.GetUserInChatFromUser_result();
        try
        {
          tmp116.Success = await _iAsync.GetUserInChatFromUser(tmp115.IdUser, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("GetUserInChatFromUser", TMessageType.Reply, seqid), cancellationToken); 
          await tmp116.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp117)
        {
          var tmp118 = $"Error occurred in {GetType().FullName}: {tmp117.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp117, tmp118);
          else
            Console.Error.WriteLine(tmp118);
          var tmp119 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GetUserInChatFromUser", TMessageType.Exception, seqid), cancellationToken);
          await tmp119.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task AddNewMessage_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp120 = new InternalStructs.AddNewMessage_args();
        await tmp120.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp121 = new InternalStructs.AddNewMessage_result();
        try
        {
          try
          {
            tmp121.Success = await _iAsync.AddNewMessage(tmp120.MessageContent, tmp120.IdChat, tmp120.NameOfShipper, cancellationToken);
          }
          catch (global::ThriftTechChat.Networking.ChatException tmp122)
          {
            tmp121.E = tmp122;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("AddNewMessage", TMessageType.Reply, seqid), cancellationToken); 
          await tmp121.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp123)
        {
          var tmp124 = $"Error occurred in {GetType().FullName}: {tmp123.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp123, tmp124);
          else
            Console.Error.WriteLine(tmp124);
          var tmp125 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("AddNewMessage", TMessageType.Exception, seqid), cancellationToken);
          await tmp125.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task AddNewFriendRequest_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp126 = new InternalStructs.AddNewFriendRequest_args();
        await tmp126.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp127 = new InternalStructs.AddNewFriendRequest_result();
        try
        {
          try
          {
            tmp127.Success = await _iAsync.AddNewFriendRequest(tmp126.IdUser, tmp126.NameOfFriend, cancellationToken);
          }
          catch (global::ThriftTechChat.Networking.ChatException tmp128)
          {
            tmp127.E = tmp128;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("AddNewFriendRequest", TMessageType.Reply, seqid), cancellationToken); 
          await tmp127.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp129)
        {
          var tmp130 = $"Error occurred in {GetType().FullName}: {tmp129.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp129, tmp130);
          else
            Console.Error.WriteLine(tmp130);
          var tmp131 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("AddNewFriendRequest", TMessageType.Exception, seqid), cancellationToken);
          await tmp131.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task SetNewMessagesInChatTo0_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp132 = new InternalStructs.SetNewMessagesInChatTo0_args();
        await tmp132.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp133 = new InternalStructs.SetNewMessagesInChatTo0_result();
        try
        {
          try
          {
            tmp133.Success = await _iAsync.SetNewMessagesInChatTo0(tmp132.IdUser, tmp132.IdChat, cancellationToken);
          }
          catch (global::ThriftTechChat.Networking.ChatException tmp134)
          {
            tmp133.E = tmp134;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("SetNewMessagesInChatTo0", TMessageType.Reply, seqid), cancellationToken); 
          await tmp133.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp135)
        {
          var tmp136 = $"Error occurred in {GetType().FullName}: {tmp135.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp135, tmp136);
          else
            Console.Error.WriteLine(tmp136);
          var tmp137 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("SetNewMessagesInChatTo0", TMessageType.Exception, seqid), cancellationToken);
          await tmp137.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task AcceptFriendRequest_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp138 = new InternalStructs.AcceptFriendRequest_args();
        await tmp138.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp139 = new InternalStructs.AcceptFriendRequest_result();
        try
        {
          try
          {
            tmp139.Success = await _iAsync.AcceptFriendRequest(tmp138.IdToUser, tmp138.IdFromUser, cancellationToken);
          }
          catch (global::ThriftTechChat.Networking.ChatException tmp140)
          {
            tmp139.E = tmp140;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("AcceptFriendRequest", TMessageType.Reply, seqid), cancellationToken); 
          await tmp139.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp141)
        {
          var tmp142 = $"Error occurred in {GetType().FullName}: {tmp141.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp141, tmp142);
          else
            Console.Error.WriteLine(tmp142);
          var tmp143 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("AcceptFriendRequest", TMessageType.Exception, seqid), cancellationToken);
          await tmp143.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task DenyFriendRequest_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp144 = new InternalStructs.DenyFriendRequest_args();
        await tmp144.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp145 = new InternalStructs.DenyFriendRequest_result();
        try
        {
          try
          {
            tmp145.Success = await _iAsync.DenyFriendRequest(tmp144.IdToUser, tmp144.IdFromUser, cancellationToken);
          }
          catch (global::ThriftTechChat.Networking.ChatException tmp146)
          {
            tmp145.E = tmp146;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("DenyFriendRequest", TMessageType.Reply, seqid), cancellationToken); 
          await tmp145.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp147)
        {
          var tmp148 = $"Error occurred in {GetType().FullName}: {tmp147.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp147, tmp148);
          else
            Console.Error.WriteLine(tmp148);
          var tmp149 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("DenyFriendRequest", TMessageType.Exception, seqid), cancellationToken);
          await tmp149.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task GetFromUsersInFriendRequestFromUser_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp150 = new InternalStructs.GetFromUsersInFriendRequestFromUser_args();
        await tmp150.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp151 = new InternalStructs.GetFromUsersInFriendRequestFromUser_result();
        try
        {
          tmp151.Success = await _iAsync.GetFromUsersInFriendRequestFromUser(tmp150.IdUser, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("GetFromUsersInFriendRequestFromUser", TMessageType.Reply, seqid), cancellationToken); 
          await tmp151.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp152)
        {
          var tmp153 = $"Error occurred in {GetType().FullName}: {tmp152.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp152, tmp153);
          else
            Console.Error.WriteLine(tmp153);
          var tmp154 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GetFromUsersInFriendRequestFromUser", TMessageType.Exception, seqid), cancellationToken);
          await tmp154.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task IsMutedChangeFromAnUserInAChat_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp155 = new InternalStructs.IsMutedChangeFromAnUserInAChat_args();
        await tmp155.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp156 = new InternalStructs.IsMutedChangeFromAnUserInAChat_result();
        try
        {
          try
          {
            tmp156.Success = await _iAsync.IsMutedChangeFromAnUserInAChat(tmp155.IdUser, tmp155.IdChat, cancellationToken);
          }
          catch (global::ThriftTechChat.Networking.ChatException tmp157)
          {
            tmp156.E = tmp157;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("IsMutedChangeFromAnUserInAChat", TMessageType.Reply, seqid), cancellationToken); 
          await tmp156.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp158)
        {
          var tmp159 = $"Error occurred in {GetType().FullName}: {tmp158.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp158, tmp159);
          else
            Console.Error.WriteLine(tmp159);
          var tmp160 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("IsMutedChangeFromAnUserInAChat", TMessageType.Exception, seqid), cancellationToken);
          await tmp160.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

    }

    public class InternalStructs
    {

      public partial class Login_args : TBase
      {
        private string _name;
        private string _password;

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }

        public string Password
        {
          get
          {
            return _password;
          }
          set
          {
            __isset.password = true;
            this._password = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool name;
          public bool password;
        }

        public Login_args()
        {
        }

        public Login_args DeepCopy()
        {
          var tmp161 = new Login_args();
          if((Name != null) && __isset.name)
          {
            tmp161.Name = this.Name;
          }
          tmp161.__isset.name = this.__isset.name;
          if((Password != null) && __isset.password)
          {
            tmp161.Password = this.Password;
          }
          tmp161.__isset.password = this.__isset.password;
          return tmp161;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Password = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp162 = new TStruct("Login_args");
            await oprot.WriteStructBeginAsync(tmp162, cancellationToken);
            var tmp163 = new TField();
            if((Name != null) && __isset.name)
            {
              tmp163.Name = "name";
              tmp163.Type = TType.String;
              tmp163.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp163, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Password != null) && __isset.password)
            {
              tmp163.Name = "password";
              tmp163.Type = TType.String;
              tmp163.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp163, cancellationToken);
              await oprot.WriteStringAsync(Password, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is Login_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))))
            && ((__isset.password == other.__isset.password) && ((!__isset.password) || (global::System.Object.Equals(Password, other.Password))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
            if((Password != null) && __isset.password)
            {
              hashcode = (hashcode * 397) + Password.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp164 = new StringBuilder("Login_args(");
          int tmp165 = 0;
          if((Name != null) && __isset.name)
          {
            if(0 < tmp165++) { tmp164.Append(", "); }
            tmp164.Append("Name: ");
            Name.ToString(tmp164);
          }
          if((Password != null) && __isset.password)
          {
            if(0 < tmp165++) { tmp164.Append(", "); }
            tmp164.Append("Password: ");
            Password.ToString(tmp164);
          }
          tmp164.Append(')');
          return tmp164.ToString();
        }
      }


      public partial class Login_result : TBase
      {
        private global::ThriftTechChat.Networking.User _success;
        private global::ThriftTechChat.Networking.ChatException _e;

        public global::ThriftTechChat.Networking.User Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::ThriftTechChat.Networking.ChatException E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public Login_result()
        {
        }

        public Login_result DeepCopy()
        {
          var tmp166 = new Login_result();
          if((Success != null) && __isset.success)
          {
            tmp166.Success = (global::ThriftTechChat.Networking.User)this.Success.DeepCopy();
          }
          tmp166.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp166.E = (global::ThriftTechChat.Networking.ChatException)this.E.DeepCopy();
          }
          tmp166.__isset.e = this.__isset.e;
          return tmp166;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::ThriftTechChat.Networking.User();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::ThriftTechChat.Networking.ChatException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp167 = new TStruct("Login_result");
            await oprot.WriteStructBeginAsync(tmp167, cancellationToken);
            var tmp168 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp168.Name = "Success";
                tmp168.Type = TType.Struct;
                tmp168.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp168, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp168.Name = "E";
                tmp168.Type = TType.Struct;
                tmp168.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp168, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is Login_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp169 = new StringBuilder("Login_result(");
          int tmp170 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp170++) { tmp169.Append(", "); }
            tmp169.Append("Success: ");
            Success.ToString(tmp169);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp170++) { tmp169.Append(", "); }
            tmp169.Append("E: ");
            E.ToString(tmp169);
          }
          tmp169.Append(')');
          return tmp169.ToString();
        }
      }


      public partial class Logout_args : TBase
      {
        private string _idUser;

        public string IdUser
        {
          get
          {
            return _idUser;
          }
          set
          {
            __isset.idUser = true;
            this._idUser = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool idUser;
        }

        public Logout_args()
        {
        }

        public Logout_args DeepCopy()
        {
          var tmp171 = new Logout_args();
          if((IdUser != null) && __isset.idUser)
          {
            tmp171.IdUser = this.IdUser;
          }
          tmp171.__isset.idUser = this.__isset.idUser;
          return tmp171;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    IdUser = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp172 = new TStruct("Logout_args");
            await oprot.WriteStructBeginAsync(tmp172, cancellationToken);
            var tmp173 = new TField();
            if((IdUser != null) && __isset.idUser)
            {
              tmp173.Name = "idUser";
              tmp173.Type = TType.String;
              tmp173.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp173, cancellationToken);
              await oprot.WriteStringAsync(IdUser, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is Logout_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.idUser == other.__isset.idUser) && ((!__isset.idUser) || (global::System.Object.Equals(IdUser, other.IdUser))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((IdUser != null) && __isset.idUser)
            {
              hashcode = (hashcode * 397) + IdUser.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp174 = new StringBuilder("Logout_args(");
          int tmp175 = 0;
          if((IdUser != null) && __isset.idUser)
          {
            if(0 < tmp175++) { tmp174.Append(", "); }
            tmp174.Append("IdUser: ");
            IdUser.ToString(tmp174);
          }
          tmp174.Append(')');
          return tmp174.ToString();
        }
      }


      public partial class Logout_result : TBase
      {
        private bool _success;
        private global::ThriftTechChat.Networking.ChatException _e;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::ThriftTechChat.Networking.ChatException E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public Logout_result()
        {
        }

        public Logout_result DeepCopy()
        {
          var tmp176 = new Logout_result();
          if(__isset.success)
          {
            tmp176.Success = this.Success;
          }
          tmp176.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp176.E = (global::ThriftTechChat.Networking.ChatException)this.E.DeepCopy();
          }
          tmp176.__isset.e = this.__isset.e;
          return tmp176;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::ThriftTechChat.Networking.ChatException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp177 = new TStruct("Logout_result");
            await oprot.WriteStructBeginAsync(tmp177, cancellationToken);
            var tmp178 = new TField();

            if(this.__isset.success)
            {
              tmp178.Name = "Success";
              tmp178.Type = TType.Bool;
              tmp178.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp178, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp178.Name = "E";
                tmp178.Type = TType.Struct;
                tmp178.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp178, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is Logout_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp179 = new StringBuilder("Logout_result(");
          int tmp180 = 0;
          if(__isset.success)
          {
            if(0 < tmp180++) { tmp179.Append(", "); }
            tmp179.Append("Success: ");
            Success.ToString(tmp179);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp180++) { tmp179.Append(", "); }
            tmp179.Append("E: ");
            E.ToString(tmp179);
          }
          tmp179.Append(')');
          return tmp179.ToString();
        }
      }


      public partial class AddNewUser_args : TBase
      {
        private string _name;
        private string _password;

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }

        public string Password
        {
          get
          {
            return _password;
          }
          set
          {
            __isset.password = true;
            this._password = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool name;
          public bool password;
        }

        public AddNewUser_args()
        {
        }

        public AddNewUser_args DeepCopy()
        {
          var tmp181 = new AddNewUser_args();
          if((Name != null) && __isset.name)
          {
            tmp181.Name = this.Name;
          }
          tmp181.__isset.name = this.__isset.name;
          if((Password != null) && __isset.password)
          {
            tmp181.Password = this.Password;
          }
          tmp181.__isset.password = this.__isset.password;
          return tmp181;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Password = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp182 = new TStruct("AddNewUser_args");
            await oprot.WriteStructBeginAsync(tmp182, cancellationToken);
            var tmp183 = new TField();
            if((Name != null) && __isset.name)
            {
              tmp183.Name = "name";
              tmp183.Type = TType.String;
              tmp183.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp183, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Password != null) && __isset.password)
            {
              tmp183.Name = "password";
              tmp183.Type = TType.String;
              tmp183.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp183, cancellationToken);
              await oprot.WriteStringAsync(Password, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is AddNewUser_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))))
            && ((__isset.password == other.__isset.password) && ((!__isset.password) || (global::System.Object.Equals(Password, other.Password))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
            if((Password != null) && __isset.password)
            {
              hashcode = (hashcode * 397) + Password.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp184 = new StringBuilder("AddNewUser_args(");
          int tmp185 = 0;
          if((Name != null) && __isset.name)
          {
            if(0 < tmp185++) { tmp184.Append(", "); }
            tmp184.Append("Name: ");
            Name.ToString(tmp184);
          }
          if((Password != null) && __isset.password)
          {
            if(0 < tmp185++) { tmp184.Append(", "); }
            tmp184.Append("Password: ");
            Password.ToString(tmp184);
          }
          tmp184.Append(')');
          return tmp184.ToString();
        }
      }


      public partial class AddNewUser_result : TBase
      {
        private global::ThriftTechChat.Networking.User _success;
        private global::ThriftTechChat.Networking.ChatException _e;

        public global::ThriftTechChat.Networking.User Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::ThriftTechChat.Networking.ChatException E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public AddNewUser_result()
        {
        }

        public AddNewUser_result DeepCopy()
        {
          var tmp186 = new AddNewUser_result();
          if((Success != null) && __isset.success)
          {
            tmp186.Success = (global::ThriftTechChat.Networking.User)this.Success.DeepCopy();
          }
          tmp186.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp186.E = (global::ThriftTechChat.Networking.ChatException)this.E.DeepCopy();
          }
          tmp186.__isset.e = this.__isset.e;
          return tmp186;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::ThriftTechChat.Networking.User();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::ThriftTechChat.Networking.ChatException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp187 = new TStruct("AddNewUser_result");
            await oprot.WriteStructBeginAsync(tmp187, cancellationToken);
            var tmp188 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp188.Name = "Success";
                tmp188.Type = TType.Struct;
                tmp188.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp188, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp188.Name = "E";
                tmp188.Type = TType.Struct;
                tmp188.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp188, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is AddNewUser_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp189 = new StringBuilder("AddNewUser_result(");
          int tmp190 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp190++) { tmp189.Append(", "); }
            tmp189.Append("Success: ");
            Success.ToString(tmp189);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp190++) { tmp189.Append(", "); }
            tmp189.Append("E: ");
            E.ToString(tmp189);
          }
          tmp189.Append(')');
          return tmp189.ToString();
        }
      }


      public partial class GetChatsFromUser_args : TBase
      {
        private string _idUser;

        public string IdUser
        {
          get
          {
            return _idUser;
          }
          set
          {
            __isset.idUser = true;
            this._idUser = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool idUser;
        }

        public GetChatsFromUser_args()
        {
        }

        public GetChatsFromUser_args DeepCopy()
        {
          var tmp191 = new GetChatsFromUser_args();
          if((IdUser != null) && __isset.idUser)
          {
            tmp191.IdUser = this.IdUser;
          }
          tmp191.__isset.idUser = this.__isset.idUser;
          return tmp191;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    IdUser = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp192 = new TStruct("GetChatsFromUser_args");
            await oprot.WriteStructBeginAsync(tmp192, cancellationToken);
            var tmp193 = new TField();
            if((IdUser != null) && __isset.idUser)
            {
              tmp193.Name = "idUser";
              tmp193.Type = TType.String;
              tmp193.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp193, cancellationToken);
              await oprot.WriteStringAsync(IdUser, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetChatsFromUser_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.idUser == other.__isset.idUser) && ((!__isset.idUser) || (global::System.Object.Equals(IdUser, other.IdUser))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((IdUser != null) && __isset.idUser)
            {
              hashcode = (hashcode * 397) + IdUser.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp194 = new StringBuilder("GetChatsFromUser_args(");
          int tmp195 = 0;
          if((IdUser != null) && __isset.idUser)
          {
            if(0 < tmp195++) { tmp194.Append(", "); }
            tmp194.Append("IdUser: ");
            IdUser.ToString(tmp194);
          }
          tmp194.Append(')');
          return tmp194.ToString();
        }
      }


      public partial class GetChatsFromUser_result : TBase
      {
        private List<global::ThriftTechChat.Networking.Chat> _success;

        public List<global::ThriftTechChat.Networking.Chat> Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public GetChatsFromUser_result()
        {
        }

        public GetChatsFromUser_result DeepCopy()
        {
          var tmp196 = new GetChatsFromUser_result();
          if((Success != null) && __isset.success)
          {
            tmp196.Success = this.Success.DeepCopy();
          }
          tmp196.__isset.success = this.__isset.success;
          return tmp196;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.List)
                  {
                    {
                      TList _list197 = await iprot.ReadListBeginAsync(cancellationToken);
                      Success = new List<global::ThriftTechChat.Networking.Chat>(_list197.Count);
                      for(int _i198 = 0; _i198 < _list197.Count; ++_i198)
                      {
                        global::ThriftTechChat.Networking.Chat _elem199;
                        _elem199 = new global::ThriftTechChat.Networking.Chat();
                        await _elem199.ReadAsync(iprot, cancellationToken);
                        Success.Add(_elem199);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp200 = new TStruct("GetChatsFromUser_result");
            await oprot.WriteStructBeginAsync(tmp200, cancellationToken);
            var tmp201 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp201.Name = "Success";
                tmp201.Type = TType.List;
                tmp201.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp201, cancellationToken);
                {
                  await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
                  foreach (global::ThriftTechChat.Networking.Chat _iter202 in Success)
                  {
                    await _iter202.WriteAsync(oprot, cancellationToken);
                  }
                  await oprot.WriteListEndAsync(cancellationToken);
                }
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetChatsFromUser_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp203 = new StringBuilder("GetChatsFromUser_result(");
          int tmp204 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp204++) { tmp203.Append(", "); }
            tmp203.Append("Success: ");
            Success.ToString(tmp203);
          }
          tmp203.Append(')');
          return tmp203.ToString();
        }
      }


      public partial class GetMessagesFromChat_args : TBase
      {
        private string _idChat;

        public string IdChat
        {
          get
          {
            return _idChat;
          }
          set
          {
            __isset.idChat = true;
            this._idChat = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool idChat;
        }

        public GetMessagesFromChat_args()
        {
        }

        public GetMessagesFromChat_args DeepCopy()
        {
          var tmp205 = new GetMessagesFromChat_args();
          if((IdChat != null) && __isset.idChat)
          {
            tmp205.IdChat = this.IdChat;
          }
          tmp205.__isset.idChat = this.__isset.idChat;
          return tmp205;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    IdChat = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp206 = new TStruct("GetMessagesFromChat_args");
            await oprot.WriteStructBeginAsync(tmp206, cancellationToken);
            var tmp207 = new TField();
            if((IdChat != null) && __isset.idChat)
            {
              tmp207.Name = "idChat";
              tmp207.Type = TType.String;
              tmp207.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp207, cancellationToken);
              await oprot.WriteStringAsync(IdChat, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetMessagesFromChat_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.idChat == other.__isset.idChat) && ((!__isset.idChat) || (global::System.Object.Equals(IdChat, other.IdChat))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((IdChat != null) && __isset.idChat)
            {
              hashcode = (hashcode * 397) + IdChat.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp208 = new StringBuilder("GetMessagesFromChat_args(");
          int tmp209 = 0;
          if((IdChat != null) && __isset.idChat)
          {
            if(0 < tmp209++) { tmp208.Append(", "); }
            tmp208.Append("IdChat: ");
            IdChat.ToString(tmp208);
          }
          tmp208.Append(')');
          return tmp208.ToString();
        }
      }


      public partial class GetMessagesFromChat_result : TBase
      {
        private List<global::ThriftTechChat.Networking.Message> _success;

        public List<global::ThriftTechChat.Networking.Message> Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public GetMessagesFromChat_result()
        {
        }

        public GetMessagesFromChat_result DeepCopy()
        {
          var tmp210 = new GetMessagesFromChat_result();
          if((Success != null) && __isset.success)
          {
            tmp210.Success = this.Success.DeepCopy();
          }
          tmp210.__isset.success = this.__isset.success;
          return tmp210;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.List)
                  {
                    {
                      TList _list211 = await iprot.ReadListBeginAsync(cancellationToken);
                      Success = new List<global::ThriftTechChat.Networking.Message>(_list211.Count);
                      for(int _i212 = 0; _i212 < _list211.Count; ++_i212)
                      {
                        global::ThriftTechChat.Networking.Message _elem213;
                        _elem213 = new global::ThriftTechChat.Networking.Message();
                        await _elem213.ReadAsync(iprot, cancellationToken);
                        Success.Add(_elem213);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp214 = new TStruct("GetMessagesFromChat_result");
            await oprot.WriteStructBeginAsync(tmp214, cancellationToken);
            var tmp215 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp215.Name = "Success";
                tmp215.Type = TType.List;
                tmp215.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp215, cancellationToken);
                {
                  await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
                  foreach (global::ThriftTechChat.Networking.Message _iter216 in Success)
                  {
                    await _iter216.WriteAsync(oprot, cancellationToken);
                  }
                  await oprot.WriteListEndAsync(cancellationToken);
                }
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetMessagesFromChat_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp217 = new StringBuilder("GetMessagesFromChat_result(");
          int tmp218 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp218++) { tmp217.Append(", "); }
            tmp217.Append("Success: ");
            Success.ToString(tmp217);
          }
          tmp217.Append(')');
          return tmp217.ToString();
        }
      }


      public partial class GetUserInChatFromUser_args : TBase
      {
        private string _idUser;

        public string IdUser
        {
          get
          {
            return _idUser;
          }
          set
          {
            __isset.idUser = true;
            this._idUser = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool idUser;
        }

        public GetUserInChatFromUser_args()
        {
        }

        public GetUserInChatFromUser_args DeepCopy()
        {
          var tmp219 = new GetUserInChatFromUser_args();
          if((IdUser != null) && __isset.idUser)
          {
            tmp219.IdUser = this.IdUser;
          }
          tmp219.__isset.idUser = this.__isset.idUser;
          return tmp219;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    IdUser = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp220 = new TStruct("GetUserInChatFromUser_args");
            await oprot.WriteStructBeginAsync(tmp220, cancellationToken);
            var tmp221 = new TField();
            if((IdUser != null) && __isset.idUser)
            {
              tmp221.Name = "idUser";
              tmp221.Type = TType.String;
              tmp221.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp221, cancellationToken);
              await oprot.WriteStringAsync(IdUser, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetUserInChatFromUser_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.idUser == other.__isset.idUser) && ((!__isset.idUser) || (global::System.Object.Equals(IdUser, other.IdUser))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((IdUser != null) && __isset.idUser)
            {
              hashcode = (hashcode * 397) + IdUser.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp222 = new StringBuilder("GetUserInChatFromUser_args(");
          int tmp223 = 0;
          if((IdUser != null) && __isset.idUser)
          {
            if(0 < tmp223++) { tmp222.Append(", "); }
            tmp222.Append("IdUser: ");
            IdUser.ToString(tmp222);
          }
          tmp222.Append(')');
          return tmp222.ToString();
        }
      }


      public partial class GetUserInChatFromUser_result : TBase
      {
        private List<global::ThriftTechChat.Networking.UserInChat> _success;

        public List<global::ThriftTechChat.Networking.UserInChat> Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public GetUserInChatFromUser_result()
        {
        }

        public GetUserInChatFromUser_result DeepCopy()
        {
          var tmp224 = new GetUserInChatFromUser_result();
          if((Success != null) && __isset.success)
          {
            tmp224.Success = this.Success.DeepCopy();
          }
          tmp224.__isset.success = this.__isset.success;
          return tmp224;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.List)
                  {
                    {
                      TList _list225 = await iprot.ReadListBeginAsync(cancellationToken);
                      Success = new List<global::ThriftTechChat.Networking.UserInChat>(_list225.Count);
                      for(int _i226 = 0; _i226 < _list225.Count; ++_i226)
                      {
                        global::ThriftTechChat.Networking.UserInChat _elem227;
                        _elem227 = new global::ThriftTechChat.Networking.UserInChat();
                        await _elem227.ReadAsync(iprot, cancellationToken);
                        Success.Add(_elem227);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp228 = new TStruct("GetUserInChatFromUser_result");
            await oprot.WriteStructBeginAsync(tmp228, cancellationToken);
            var tmp229 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp229.Name = "Success";
                tmp229.Type = TType.List;
                tmp229.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp229, cancellationToken);
                {
                  await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
                  foreach (global::ThriftTechChat.Networking.UserInChat _iter230 in Success)
                  {
                    await _iter230.WriteAsync(oprot, cancellationToken);
                  }
                  await oprot.WriteListEndAsync(cancellationToken);
                }
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetUserInChatFromUser_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp231 = new StringBuilder("GetUserInChatFromUser_result(");
          int tmp232 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp232++) { tmp231.Append(", "); }
            tmp231.Append("Success: ");
            Success.ToString(tmp231);
          }
          tmp231.Append(')');
          return tmp231.ToString();
        }
      }


      public partial class AddNewMessage_args : TBase
      {
        private string _messageContent;
        private string _idChat;
        private string _nameOfShipper;

        public string MessageContent
        {
          get
          {
            return _messageContent;
          }
          set
          {
            __isset.messageContent = true;
            this._messageContent = value;
          }
        }

        public string IdChat
        {
          get
          {
            return _idChat;
          }
          set
          {
            __isset.idChat = true;
            this._idChat = value;
          }
        }

        public string NameOfShipper
        {
          get
          {
            return _nameOfShipper;
          }
          set
          {
            __isset.nameOfShipper = true;
            this._nameOfShipper = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool messageContent;
          public bool idChat;
          public bool nameOfShipper;
        }

        public AddNewMessage_args()
        {
        }

        public AddNewMessage_args DeepCopy()
        {
          var tmp233 = new AddNewMessage_args();
          if((MessageContent != null) && __isset.messageContent)
          {
            tmp233.MessageContent = this.MessageContent;
          }
          tmp233.__isset.messageContent = this.__isset.messageContent;
          if((IdChat != null) && __isset.idChat)
          {
            tmp233.IdChat = this.IdChat;
          }
          tmp233.__isset.idChat = this.__isset.idChat;
          if((NameOfShipper != null) && __isset.nameOfShipper)
          {
            tmp233.NameOfShipper = this.NameOfShipper;
          }
          tmp233.__isset.nameOfShipper = this.__isset.nameOfShipper;
          return tmp233;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    MessageContent = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    IdChat = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    NameOfShipper = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp234 = new TStruct("AddNewMessage_args");
            await oprot.WriteStructBeginAsync(tmp234, cancellationToken);
            var tmp235 = new TField();
            if((MessageContent != null) && __isset.messageContent)
            {
              tmp235.Name = "messageContent";
              tmp235.Type = TType.String;
              tmp235.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp235, cancellationToken);
              await oprot.WriteStringAsync(MessageContent, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((IdChat != null) && __isset.idChat)
            {
              tmp235.Name = "idChat";
              tmp235.Type = TType.String;
              tmp235.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp235, cancellationToken);
              await oprot.WriteStringAsync(IdChat, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((NameOfShipper != null) && __isset.nameOfShipper)
            {
              tmp235.Name = "nameOfShipper";
              tmp235.Type = TType.String;
              tmp235.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp235, cancellationToken);
              await oprot.WriteStringAsync(NameOfShipper, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is AddNewMessage_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.messageContent == other.__isset.messageContent) && ((!__isset.messageContent) || (global::System.Object.Equals(MessageContent, other.MessageContent))))
            && ((__isset.idChat == other.__isset.idChat) && ((!__isset.idChat) || (global::System.Object.Equals(IdChat, other.IdChat))))
            && ((__isset.nameOfShipper == other.__isset.nameOfShipper) && ((!__isset.nameOfShipper) || (global::System.Object.Equals(NameOfShipper, other.NameOfShipper))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((MessageContent != null) && __isset.messageContent)
            {
              hashcode = (hashcode * 397) + MessageContent.GetHashCode();
            }
            if((IdChat != null) && __isset.idChat)
            {
              hashcode = (hashcode * 397) + IdChat.GetHashCode();
            }
            if((NameOfShipper != null) && __isset.nameOfShipper)
            {
              hashcode = (hashcode * 397) + NameOfShipper.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp236 = new StringBuilder("AddNewMessage_args(");
          int tmp237 = 0;
          if((MessageContent != null) && __isset.messageContent)
          {
            if(0 < tmp237++) { tmp236.Append(", "); }
            tmp236.Append("MessageContent: ");
            MessageContent.ToString(tmp236);
          }
          if((IdChat != null) && __isset.idChat)
          {
            if(0 < tmp237++) { tmp236.Append(", "); }
            tmp236.Append("IdChat: ");
            IdChat.ToString(tmp236);
          }
          if((NameOfShipper != null) && __isset.nameOfShipper)
          {
            if(0 < tmp237++) { tmp236.Append(", "); }
            tmp236.Append("NameOfShipper: ");
            NameOfShipper.ToString(tmp236);
          }
          tmp236.Append(')');
          return tmp236.ToString();
        }
      }


      public partial class AddNewMessage_result : TBase
      {
        private bool _success;
        private global::ThriftTechChat.Networking.ChatException _e;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::ThriftTechChat.Networking.ChatException E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public AddNewMessage_result()
        {
        }

        public AddNewMessage_result DeepCopy()
        {
          var tmp238 = new AddNewMessage_result();
          if(__isset.success)
          {
            tmp238.Success = this.Success;
          }
          tmp238.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp238.E = (global::ThriftTechChat.Networking.ChatException)this.E.DeepCopy();
          }
          tmp238.__isset.e = this.__isset.e;
          return tmp238;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::ThriftTechChat.Networking.ChatException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp239 = new TStruct("AddNewMessage_result");
            await oprot.WriteStructBeginAsync(tmp239, cancellationToken);
            var tmp240 = new TField();

            if(this.__isset.success)
            {
              tmp240.Name = "Success";
              tmp240.Type = TType.Bool;
              tmp240.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp240, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp240.Name = "E";
                tmp240.Type = TType.Struct;
                tmp240.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp240, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is AddNewMessage_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp241 = new StringBuilder("AddNewMessage_result(");
          int tmp242 = 0;
          if(__isset.success)
          {
            if(0 < tmp242++) { tmp241.Append(", "); }
            tmp241.Append("Success: ");
            Success.ToString(tmp241);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp242++) { tmp241.Append(", "); }
            tmp241.Append("E: ");
            E.ToString(tmp241);
          }
          tmp241.Append(')');
          return tmp241.ToString();
        }
      }


      public partial class AddNewFriendRequest_args : TBase
      {
        private string _idUser;
        private string _nameOfFriend;

        public string IdUser
        {
          get
          {
            return _idUser;
          }
          set
          {
            __isset.idUser = true;
            this._idUser = value;
          }
        }

        public string NameOfFriend
        {
          get
          {
            return _nameOfFriend;
          }
          set
          {
            __isset.nameOfFriend = true;
            this._nameOfFriend = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool idUser;
          public bool nameOfFriend;
        }

        public AddNewFriendRequest_args()
        {
        }

        public AddNewFriendRequest_args DeepCopy()
        {
          var tmp243 = new AddNewFriendRequest_args();
          if((IdUser != null) && __isset.idUser)
          {
            tmp243.IdUser = this.IdUser;
          }
          tmp243.__isset.idUser = this.__isset.idUser;
          if((NameOfFriend != null) && __isset.nameOfFriend)
          {
            tmp243.NameOfFriend = this.NameOfFriend;
          }
          tmp243.__isset.nameOfFriend = this.__isset.nameOfFriend;
          return tmp243;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    IdUser = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    NameOfFriend = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp244 = new TStruct("AddNewFriendRequest_args");
            await oprot.WriteStructBeginAsync(tmp244, cancellationToken);
            var tmp245 = new TField();
            if((IdUser != null) && __isset.idUser)
            {
              tmp245.Name = "idUser";
              tmp245.Type = TType.String;
              tmp245.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp245, cancellationToken);
              await oprot.WriteStringAsync(IdUser, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((NameOfFriend != null) && __isset.nameOfFriend)
            {
              tmp245.Name = "nameOfFriend";
              tmp245.Type = TType.String;
              tmp245.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp245, cancellationToken);
              await oprot.WriteStringAsync(NameOfFriend, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is AddNewFriendRequest_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.idUser == other.__isset.idUser) && ((!__isset.idUser) || (global::System.Object.Equals(IdUser, other.IdUser))))
            && ((__isset.nameOfFriend == other.__isset.nameOfFriend) && ((!__isset.nameOfFriend) || (global::System.Object.Equals(NameOfFriend, other.NameOfFriend))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((IdUser != null) && __isset.idUser)
            {
              hashcode = (hashcode * 397) + IdUser.GetHashCode();
            }
            if((NameOfFriend != null) && __isset.nameOfFriend)
            {
              hashcode = (hashcode * 397) + NameOfFriend.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp246 = new StringBuilder("AddNewFriendRequest_args(");
          int tmp247 = 0;
          if((IdUser != null) && __isset.idUser)
          {
            if(0 < tmp247++) { tmp246.Append(", "); }
            tmp246.Append("IdUser: ");
            IdUser.ToString(tmp246);
          }
          if((NameOfFriend != null) && __isset.nameOfFriend)
          {
            if(0 < tmp247++) { tmp246.Append(", "); }
            tmp246.Append("NameOfFriend: ");
            NameOfFriend.ToString(tmp246);
          }
          tmp246.Append(')');
          return tmp246.ToString();
        }
      }


      public partial class AddNewFriendRequest_result : TBase
      {
        private bool _success;
        private global::ThriftTechChat.Networking.ChatException _e;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::ThriftTechChat.Networking.ChatException E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public AddNewFriendRequest_result()
        {
        }

        public AddNewFriendRequest_result DeepCopy()
        {
          var tmp248 = new AddNewFriendRequest_result();
          if(__isset.success)
          {
            tmp248.Success = this.Success;
          }
          tmp248.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp248.E = (global::ThriftTechChat.Networking.ChatException)this.E.DeepCopy();
          }
          tmp248.__isset.e = this.__isset.e;
          return tmp248;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::ThriftTechChat.Networking.ChatException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp249 = new TStruct("AddNewFriendRequest_result");
            await oprot.WriteStructBeginAsync(tmp249, cancellationToken);
            var tmp250 = new TField();

            if(this.__isset.success)
            {
              tmp250.Name = "Success";
              tmp250.Type = TType.Bool;
              tmp250.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp250, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp250.Name = "E";
                tmp250.Type = TType.Struct;
                tmp250.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp250, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is AddNewFriendRequest_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp251 = new StringBuilder("AddNewFriendRequest_result(");
          int tmp252 = 0;
          if(__isset.success)
          {
            if(0 < tmp252++) { tmp251.Append(", "); }
            tmp251.Append("Success: ");
            Success.ToString(tmp251);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp252++) { tmp251.Append(", "); }
            tmp251.Append("E: ");
            E.ToString(tmp251);
          }
          tmp251.Append(')');
          return tmp251.ToString();
        }
      }


      public partial class SetNewMessagesInChatTo0_args : TBase
      {
        private string _idUser;
        private string _idChat;

        public string IdUser
        {
          get
          {
            return _idUser;
          }
          set
          {
            __isset.idUser = true;
            this._idUser = value;
          }
        }

        public string IdChat
        {
          get
          {
            return _idChat;
          }
          set
          {
            __isset.idChat = true;
            this._idChat = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool idUser;
          public bool idChat;
        }

        public SetNewMessagesInChatTo0_args()
        {
        }

        public SetNewMessagesInChatTo0_args DeepCopy()
        {
          var tmp253 = new SetNewMessagesInChatTo0_args();
          if((IdUser != null) && __isset.idUser)
          {
            tmp253.IdUser = this.IdUser;
          }
          tmp253.__isset.idUser = this.__isset.idUser;
          if((IdChat != null) && __isset.idChat)
          {
            tmp253.IdChat = this.IdChat;
          }
          tmp253.__isset.idChat = this.__isset.idChat;
          return tmp253;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    IdUser = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    IdChat = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp254 = new TStruct("SetNewMessagesInChatTo0_args");
            await oprot.WriteStructBeginAsync(tmp254, cancellationToken);
            var tmp255 = new TField();
            if((IdUser != null) && __isset.idUser)
            {
              tmp255.Name = "idUser";
              tmp255.Type = TType.String;
              tmp255.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp255, cancellationToken);
              await oprot.WriteStringAsync(IdUser, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((IdChat != null) && __isset.idChat)
            {
              tmp255.Name = "idChat";
              tmp255.Type = TType.String;
              tmp255.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp255, cancellationToken);
              await oprot.WriteStringAsync(IdChat, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is SetNewMessagesInChatTo0_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.idUser == other.__isset.idUser) && ((!__isset.idUser) || (global::System.Object.Equals(IdUser, other.IdUser))))
            && ((__isset.idChat == other.__isset.idChat) && ((!__isset.idChat) || (global::System.Object.Equals(IdChat, other.IdChat))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((IdUser != null) && __isset.idUser)
            {
              hashcode = (hashcode * 397) + IdUser.GetHashCode();
            }
            if((IdChat != null) && __isset.idChat)
            {
              hashcode = (hashcode * 397) + IdChat.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp256 = new StringBuilder("SetNewMessagesInChatTo0_args(");
          int tmp257 = 0;
          if((IdUser != null) && __isset.idUser)
          {
            if(0 < tmp257++) { tmp256.Append(", "); }
            tmp256.Append("IdUser: ");
            IdUser.ToString(tmp256);
          }
          if((IdChat != null) && __isset.idChat)
          {
            if(0 < tmp257++) { tmp256.Append(", "); }
            tmp256.Append("IdChat: ");
            IdChat.ToString(tmp256);
          }
          tmp256.Append(')');
          return tmp256.ToString();
        }
      }


      public partial class SetNewMessagesInChatTo0_result : TBase
      {
        private bool _success;
        private global::ThriftTechChat.Networking.ChatException _e;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::ThriftTechChat.Networking.ChatException E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public SetNewMessagesInChatTo0_result()
        {
        }

        public SetNewMessagesInChatTo0_result DeepCopy()
        {
          var tmp258 = new SetNewMessagesInChatTo0_result();
          if(__isset.success)
          {
            tmp258.Success = this.Success;
          }
          tmp258.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp258.E = (global::ThriftTechChat.Networking.ChatException)this.E.DeepCopy();
          }
          tmp258.__isset.e = this.__isset.e;
          return tmp258;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::ThriftTechChat.Networking.ChatException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp259 = new TStruct("SetNewMessagesInChatTo0_result");
            await oprot.WriteStructBeginAsync(tmp259, cancellationToken);
            var tmp260 = new TField();

            if(this.__isset.success)
            {
              tmp260.Name = "Success";
              tmp260.Type = TType.Bool;
              tmp260.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp260, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp260.Name = "E";
                tmp260.Type = TType.Struct;
                tmp260.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp260, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is SetNewMessagesInChatTo0_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp261 = new StringBuilder("SetNewMessagesInChatTo0_result(");
          int tmp262 = 0;
          if(__isset.success)
          {
            if(0 < tmp262++) { tmp261.Append(", "); }
            tmp261.Append("Success: ");
            Success.ToString(tmp261);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp262++) { tmp261.Append(", "); }
            tmp261.Append("E: ");
            E.ToString(tmp261);
          }
          tmp261.Append(')');
          return tmp261.ToString();
        }
      }


      public partial class AcceptFriendRequest_args : TBase
      {
        private string _idToUser;
        private string _idFromUser;

        public string IdToUser
        {
          get
          {
            return _idToUser;
          }
          set
          {
            __isset.idToUser = true;
            this._idToUser = value;
          }
        }

        public string IdFromUser
        {
          get
          {
            return _idFromUser;
          }
          set
          {
            __isset.idFromUser = true;
            this._idFromUser = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool idToUser;
          public bool idFromUser;
        }

        public AcceptFriendRequest_args()
        {
        }

        public AcceptFriendRequest_args DeepCopy()
        {
          var tmp263 = new AcceptFriendRequest_args();
          if((IdToUser != null) && __isset.idToUser)
          {
            tmp263.IdToUser = this.IdToUser;
          }
          tmp263.__isset.idToUser = this.__isset.idToUser;
          if((IdFromUser != null) && __isset.idFromUser)
          {
            tmp263.IdFromUser = this.IdFromUser;
          }
          tmp263.__isset.idFromUser = this.__isset.idFromUser;
          return tmp263;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    IdToUser = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    IdFromUser = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp264 = new TStruct("AcceptFriendRequest_args");
            await oprot.WriteStructBeginAsync(tmp264, cancellationToken);
            var tmp265 = new TField();
            if((IdToUser != null) && __isset.idToUser)
            {
              tmp265.Name = "idToUser";
              tmp265.Type = TType.String;
              tmp265.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp265, cancellationToken);
              await oprot.WriteStringAsync(IdToUser, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((IdFromUser != null) && __isset.idFromUser)
            {
              tmp265.Name = "idFromUser";
              tmp265.Type = TType.String;
              tmp265.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp265, cancellationToken);
              await oprot.WriteStringAsync(IdFromUser, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is AcceptFriendRequest_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.idToUser == other.__isset.idToUser) && ((!__isset.idToUser) || (global::System.Object.Equals(IdToUser, other.IdToUser))))
            && ((__isset.idFromUser == other.__isset.idFromUser) && ((!__isset.idFromUser) || (global::System.Object.Equals(IdFromUser, other.IdFromUser))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((IdToUser != null) && __isset.idToUser)
            {
              hashcode = (hashcode * 397) + IdToUser.GetHashCode();
            }
            if((IdFromUser != null) && __isset.idFromUser)
            {
              hashcode = (hashcode * 397) + IdFromUser.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp266 = new StringBuilder("AcceptFriendRequest_args(");
          int tmp267 = 0;
          if((IdToUser != null) && __isset.idToUser)
          {
            if(0 < tmp267++) { tmp266.Append(", "); }
            tmp266.Append("IdToUser: ");
            IdToUser.ToString(tmp266);
          }
          if((IdFromUser != null) && __isset.idFromUser)
          {
            if(0 < tmp267++) { tmp266.Append(", "); }
            tmp266.Append("IdFromUser: ");
            IdFromUser.ToString(tmp266);
          }
          tmp266.Append(')');
          return tmp266.ToString();
        }
      }


      public partial class AcceptFriendRequest_result : TBase
      {
        private bool _success;
        private global::ThriftTechChat.Networking.ChatException _e;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::ThriftTechChat.Networking.ChatException E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public AcceptFriendRequest_result()
        {
        }

        public AcceptFriendRequest_result DeepCopy()
        {
          var tmp268 = new AcceptFriendRequest_result();
          if(__isset.success)
          {
            tmp268.Success = this.Success;
          }
          tmp268.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp268.E = (global::ThriftTechChat.Networking.ChatException)this.E.DeepCopy();
          }
          tmp268.__isset.e = this.__isset.e;
          return tmp268;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::ThriftTechChat.Networking.ChatException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp269 = new TStruct("AcceptFriendRequest_result");
            await oprot.WriteStructBeginAsync(tmp269, cancellationToken);
            var tmp270 = new TField();

            if(this.__isset.success)
            {
              tmp270.Name = "Success";
              tmp270.Type = TType.Bool;
              tmp270.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp270, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp270.Name = "E";
                tmp270.Type = TType.Struct;
                tmp270.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp270, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is AcceptFriendRequest_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp271 = new StringBuilder("AcceptFriendRequest_result(");
          int tmp272 = 0;
          if(__isset.success)
          {
            if(0 < tmp272++) { tmp271.Append(", "); }
            tmp271.Append("Success: ");
            Success.ToString(tmp271);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp272++) { tmp271.Append(", "); }
            tmp271.Append("E: ");
            E.ToString(tmp271);
          }
          tmp271.Append(')');
          return tmp271.ToString();
        }
      }


      public partial class DenyFriendRequest_args : TBase
      {
        private string _idToUser;
        private string _idFromUser;

        public string IdToUser
        {
          get
          {
            return _idToUser;
          }
          set
          {
            __isset.idToUser = true;
            this._idToUser = value;
          }
        }

        public string IdFromUser
        {
          get
          {
            return _idFromUser;
          }
          set
          {
            __isset.idFromUser = true;
            this._idFromUser = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool idToUser;
          public bool idFromUser;
        }

        public DenyFriendRequest_args()
        {
        }

        public DenyFriendRequest_args DeepCopy()
        {
          var tmp273 = new DenyFriendRequest_args();
          if((IdToUser != null) && __isset.idToUser)
          {
            tmp273.IdToUser = this.IdToUser;
          }
          tmp273.__isset.idToUser = this.__isset.idToUser;
          if((IdFromUser != null) && __isset.idFromUser)
          {
            tmp273.IdFromUser = this.IdFromUser;
          }
          tmp273.__isset.idFromUser = this.__isset.idFromUser;
          return tmp273;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    IdToUser = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    IdFromUser = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp274 = new TStruct("DenyFriendRequest_args");
            await oprot.WriteStructBeginAsync(tmp274, cancellationToken);
            var tmp275 = new TField();
            if((IdToUser != null) && __isset.idToUser)
            {
              tmp275.Name = "idToUser";
              tmp275.Type = TType.String;
              tmp275.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp275, cancellationToken);
              await oprot.WriteStringAsync(IdToUser, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((IdFromUser != null) && __isset.idFromUser)
            {
              tmp275.Name = "idFromUser";
              tmp275.Type = TType.String;
              tmp275.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp275, cancellationToken);
              await oprot.WriteStringAsync(IdFromUser, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is DenyFriendRequest_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.idToUser == other.__isset.idToUser) && ((!__isset.idToUser) || (global::System.Object.Equals(IdToUser, other.IdToUser))))
            && ((__isset.idFromUser == other.__isset.idFromUser) && ((!__isset.idFromUser) || (global::System.Object.Equals(IdFromUser, other.IdFromUser))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((IdToUser != null) && __isset.idToUser)
            {
              hashcode = (hashcode * 397) + IdToUser.GetHashCode();
            }
            if((IdFromUser != null) && __isset.idFromUser)
            {
              hashcode = (hashcode * 397) + IdFromUser.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp276 = new StringBuilder("DenyFriendRequest_args(");
          int tmp277 = 0;
          if((IdToUser != null) && __isset.idToUser)
          {
            if(0 < tmp277++) { tmp276.Append(", "); }
            tmp276.Append("IdToUser: ");
            IdToUser.ToString(tmp276);
          }
          if((IdFromUser != null) && __isset.idFromUser)
          {
            if(0 < tmp277++) { tmp276.Append(", "); }
            tmp276.Append("IdFromUser: ");
            IdFromUser.ToString(tmp276);
          }
          tmp276.Append(')');
          return tmp276.ToString();
        }
      }


      public partial class DenyFriendRequest_result : TBase
      {
        private bool _success;
        private global::ThriftTechChat.Networking.ChatException _e;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::ThriftTechChat.Networking.ChatException E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public DenyFriendRequest_result()
        {
        }

        public DenyFriendRequest_result DeepCopy()
        {
          var tmp278 = new DenyFriendRequest_result();
          if(__isset.success)
          {
            tmp278.Success = this.Success;
          }
          tmp278.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp278.E = (global::ThriftTechChat.Networking.ChatException)this.E.DeepCopy();
          }
          tmp278.__isset.e = this.__isset.e;
          return tmp278;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::ThriftTechChat.Networking.ChatException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp279 = new TStruct("DenyFriendRequest_result");
            await oprot.WriteStructBeginAsync(tmp279, cancellationToken);
            var tmp280 = new TField();

            if(this.__isset.success)
            {
              tmp280.Name = "Success";
              tmp280.Type = TType.Bool;
              tmp280.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp280, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp280.Name = "E";
                tmp280.Type = TType.Struct;
                tmp280.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp280, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is DenyFriendRequest_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp281 = new StringBuilder("DenyFriendRequest_result(");
          int tmp282 = 0;
          if(__isset.success)
          {
            if(0 < tmp282++) { tmp281.Append(", "); }
            tmp281.Append("Success: ");
            Success.ToString(tmp281);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp282++) { tmp281.Append(", "); }
            tmp281.Append("E: ");
            E.ToString(tmp281);
          }
          tmp281.Append(')');
          return tmp281.ToString();
        }
      }


      public partial class GetFromUsersInFriendRequestFromUser_args : TBase
      {
        private string _idUser;

        public string IdUser
        {
          get
          {
            return _idUser;
          }
          set
          {
            __isset.idUser = true;
            this._idUser = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool idUser;
        }

        public GetFromUsersInFriendRequestFromUser_args()
        {
        }

        public GetFromUsersInFriendRequestFromUser_args DeepCopy()
        {
          var tmp283 = new GetFromUsersInFriendRequestFromUser_args();
          if((IdUser != null) && __isset.idUser)
          {
            tmp283.IdUser = this.IdUser;
          }
          tmp283.__isset.idUser = this.__isset.idUser;
          return tmp283;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    IdUser = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp284 = new TStruct("GetFromUsersInFriendRequestFromUser_args");
            await oprot.WriteStructBeginAsync(tmp284, cancellationToken);
            var tmp285 = new TField();
            if((IdUser != null) && __isset.idUser)
            {
              tmp285.Name = "idUser";
              tmp285.Type = TType.String;
              tmp285.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp285, cancellationToken);
              await oprot.WriteStringAsync(IdUser, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetFromUsersInFriendRequestFromUser_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.idUser == other.__isset.idUser) && ((!__isset.idUser) || (global::System.Object.Equals(IdUser, other.IdUser))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((IdUser != null) && __isset.idUser)
            {
              hashcode = (hashcode * 397) + IdUser.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp286 = new StringBuilder("GetFromUsersInFriendRequestFromUser_args(");
          int tmp287 = 0;
          if((IdUser != null) && __isset.idUser)
          {
            if(0 < tmp287++) { tmp286.Append(", "); }
            tmp286.Append("IdUser: ");
            IdUser.ToString(tmp286);
          }
          tmp286.Append(')');
          return tmp286.ToString();
        }
      }


      public partial class GetFromUsersInFriendRequestFromUser_result : TBase
      {
        private List<global::ThriftTechChat.Networking.User> _success;

        public List<global::ThriftTechChat.Networking.User> Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public GetFromUsersInFriendRequestFromUser_result()
        {
        }

        public GetFromUsersInFriendRequestFromUser_result DeepCopy()
        {
          var tmp288 = new GetFromUsersInFriendRequestFromUser_result();
          if((Success != null) && __isset.success)
          {
            tmp288.Success = this.Success.DeepCopy();
          }
          tmp288.__isset.success = this.__isset.success;
          return tmp288;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.List)
                  {
                    {
                      TList _list289 = await iprot.ReadListBeginAsync(cancellationToken);
                      Success = new List<global::ThriftTechChat.Networking.User>(_list289.Count);
                      for(int _i290 = 0; _i290 < _list289.Count; ++_i290)
                      {
                        global::ThriftTechChat.Networking.User _elem291;
                        _elem291 = new global::ThriftTechChat.Networking.User();
                        await _elem291.ReadAsync(iprot, cancellationToken);
                        Success.Add(_elem291);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp292 = new TStruct("GetFromUsersInFriendRequestFromUser_result");
            await oprot.WriteStructBeginAsync(tmp292, cancellationToken);
            var tmp293 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp293.Name = "Success";
                tmp293.Type = TType.List;
                tmp293.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp293, cancellationToken);
                {
                  await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
                  foreach (global::ThriftTechChat.Networking.User _iter294 in Success)
                  {
                    await _iter294.WriteAsync(oprot, cancellationToken);
                  }
                  await oprot.WriteListEndAsync(cancellationToken);
                }
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetFromUsersInFriendRequestFromUser_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp295 = new StringBuilder("GetFromUsersInFriendRequestFromUser_result(");
          int tmp296 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp296++) { tmp295.Append(", "); }
            tmp295.Append("Success: ");
            Success.ToString(tmp295);
          }
          tmp295.Append(')');
          return tmp295.ToString();
        }
      }


      public partial class IsMutedChangeFromAnUserInAChat_args : TBase
      {
        private string _idUser;
        private string _idChat;

        public string IdUser
        {
          get
          {
            return _idUser;
          }
          set
          {
            __isset.idUser = true;
            this._idUser = value;
          }
        }

        public string IdChat
        {
          get
          {
            return _idChat;
          }
          set
          {
            __isset.idChat = true;
            this._idChat = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool idUser;
          public bool idChat;
        }

        public IsMutedChangeFromAnUserInAChat_args()
        {
        }

        public IsMutedChangeFromAnUserInAChat_args DeepCopy()
        {
          var tmp297 = new IsMutedChangeFromAnUserInAChat_args();
          if((IdUser != null) && __isset.idUser)
          {
            tmp297.IdUser = this.IdUser;
          }
          tmp297.__isset.idUser = this.__isset.idUser;
          if((IdChat != null) && __isset.idChat)
          {
            tmp297.IdChat = this.IdChat;
          }
          tmp297.__isset.idChat = this.__isset.idChat;
          return tmp297;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    IdUser = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    IdChat = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp298 = new TStruct("IsMutedChangeFromAnUserInAChat_args");
            await oprot.WriteStructBeginAsync(tmp298, cancellationToken);
            var tmp299 = new TField();
            if((IdUser != null) && __isset.idUser)
            {
              tmp299.Name = "idUser";
              tmp299.Type = TType.String;
              tmp299.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp299, cancellationToken);
              await oprot.WriteStringAsync(IdUser, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((IdChat != null) && __isset.idChat)
            {
              tmp299.Name = "idChat";
              tmp299.Type = TType.String;
              tmp299.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp299, cancellationToken);
              await oprot.WriteStringAsync(IdChat, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is IsMutedChangeFromAnUserInAChat_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.idUser == other.__isset.idUser) && ((!__isset.idUser) || (global::System.Object.Equals(IdUser, other.IdUser))))
            && ((__isset.idChat == other.__isset.idChat) && ((!__isset.idChat) || (global::System.Object.Equals(IdChat, other.IdChat))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((IdUser != null) && __isset.idUser)
            {
              hashcode = (hashcode * 397) + IdUser.GetHashCode();
            }
            if((IdChat != null) && __isset.idChat)
            {
              hashcode = (hashcode * 397) + IdChat.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp300 = new StringBuilder("IsMutedChangeFromAnUserInAChat_args(");
          int tmp301 = 0;
          if((IdUser != null) && __isset.idUser)
          {
            if(0 < tmp301++) { tmp300.Append(", "); }
            tmp300.Append("IdUser: ");
            IdUser.ToString(tmp300);
          }
          if((IdChat != null) && __isset.idChat)
          {
            if(0 < tmp301++) { tmp300.Append(", "); }
            tmp300.Append("IdChat: ");
            IdChat.ToString(tmp300);
          }
          tmp300.Append(')');
          return tmp300.ToString();
        }
      }


      public partial class IsMutedChangeFromAnUserInAChat_result : TBase
      {
        private bool _success;
        private global::ThriftTechChat.Networking.ChatException _e;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::ThriftTechChat.Networking.ChatException E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
        }

        public IsMutedChangeFromAnUserInAChat_result()
        {
        }

        public IsMutedChangeFromAnUserInAChat_result DeepCopy()
        {
          var tmp302 = new IsMutedChangeFromAnUserInAChat_result();
          if(__isset.success)
          {
            tmp302.Success = this.Success;
          }
          tmp302.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp302.E = (global::ThriftTechChat.Networking.ChatException)this.E.DeepCopy();
          }
          tmp302.__isset.e = this.__isset.e;
          return tmp302;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::ThriftTechChat.Networking.ChatException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp303 = new TStruct("IsMutedChangeFromAnUserInAChat_result");
            await oprot.WriteStructBeginAsync(tmp303, cancellationToken);
            var tmp304 = new TField();

            if(this.__isset.success)
            {
              tmp304.Name = "Success";
              tmp304.Type = TType.Bool;
              tmp304.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp304, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp304.Name = "E";
                tmp304.Type = TType.Struct;
                tmp304.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp304, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is IsMutedChangeFromAnUserInAChat_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp305 = new StringBuilder("IsMutedChangeFromAnUserInAChat_result(");
          int tmp306 = 0;
          if(__isset.success)
          {
            if(0 < tmp306++) { tmp305.Append(", "); }
            tmp305.Append("Success: ");
            Success.ToString(tmp305);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp306++) { tmp305.Append(", "); }
            tmp305.Append("E: ");
            E.ToString(tmp305);
          }
          tmp305.Append(')');
          return tmp305.ToString();
        }
      }

    }

  }
}
