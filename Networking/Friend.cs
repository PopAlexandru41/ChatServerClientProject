/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace ThriftTechChat.Networking
{

  public partial class Friend : TBase
  {
    private string _idFriend;
    private string _idUser1;
    private string _idUser2;
    private string _DateTimeWhenRelacionWasCreated;

    public string IdFriend
    {
      get
      {
        return _idFriend;
      }
      set
      {
        __isset.idFriend = true;
        this._idFriend = value;
      }
    }

    public string IdUser1
    {
      get
      {
        return _idUser1;
      }
      set
      {
        __isset.idUser1 = true;
        this._idUser1 = value;
      }
    }

    public string IdUser2
    {
      get
      {
        return _idUser2;
      }
      set
      {
        __isset.idUser2 = true;
        this._idUser2 = value;
      }
    }

    public string DateTimeWhenRelacionWasCreated
    {
      get
      {
        return _DateTimeWhenRelacionWasCreated;
      }
      set
      {
        __isset.DateTimeWhenRelacionWasCreated = true;
        this._DateTimeWhenRelacionWasCreated = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool idFriend;
      public bool idUser1;
      public bool idUser2;
      public bool DateTimeWhenRelacionWasCreated;
    }

    public Friend()
    {
    }

    public Friend DeepCopy()
    {
      var tmp15 = new Friend();
      if((IdFriend != null) && __isset.idFriend)
      {
        tmp15.IdFriend = this.IdFriend;
      }
      tmp15.__isset.idFriend = this.__isset.idFriend;
      if((IdUser1 != null) && __isset.idUser1)
      {
        tmp15.IdUser1 = this.IdUser1;
      }
      tmp15.__isset.idUser1 = this.__isset.idUser1;
      if((IdUser2 != null) && __isset.idUser2)
      {
        tmp15.IdUser2 = this.IdUser2;
      }
      tmp15.__isset.idUser2 = this.__isset.idUser2;
      if((DateTimeWhenRelacionWasCreated != null) && __isset.DateTimeWhenRelacionWasCreated)
      {
        tmp15.DateTimeWhenRelacionWasCreated = this.DateTimeWhenRelacionWasCreated;
      }
      tmp15.__isset.DateTimeWhenRelacionWasCreated = this.__isset.DateTimeWhenRelacionWasCreated;
      return tmp15;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                IdFriend = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                IdUser1 = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                IdUser2 = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.String)
              {
                DateTimeWhenRelacionWasCreated = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp16 = new TStruct("Friend");
        await oprot.WriteStructBeginAsync(tmp16, cancellationToken);
        var tmp17 = new TField();
        if((IdFriend != null) && __isset.idFriend)
        {
          tmp17.Name = "idFriend";
          tmp17.Type = TType.String;
          tmp17.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp17, cancellationToken);
          await oprot.WriteStringAsync(IdFriend, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((IdUser1 != null) && __isset.idUser1)
        {
          tmp17.Name = "idUser1";
          tmp17.Type = TType.String;
          tmp17.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp17, cancellationToken);
          await oprot.WriteStringAsync(IdUser1, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((IdUser2 != null) && __isset.idUser2)
        {
          tmp17.Name = "idUser2";
          tmp17.Type = TType.String;
          tmp17.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp17, cancellationToken);
          await oprot.WriteStringAsync(IdUser2, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((DateTimeWhenRelacionWasCreated != null) && __isset.DateTimeWhenRelacionWasCreated)
        {
          tmp17.Name = "DateTimeWhenRelacionWasCreated";
          tmp17.Type = TType.String;
          tmp17.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp17, cancellationToken);
          await oprot.WriteStringAsync(DateTimeWhenRelacionWasCreated, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is Friend other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.idFriend == other.__isset.idFriend) && ((!__isset.idFriend) || (global::System.Object.Equals(IdFriend, other.IdFriend))))
        && ((__isset.idUser1 == other.__isset.idUser1) && ((!__isset.idUser1) || (global::System.Object.Equals(IdUser1, other.IdUser1))))
        && ((__isset.idUser2 == other.__isset.idUser2) && ((!__isset.idUser2) || (global::System.Object.Equals(IdUser2, other.IdUser2))))
        && ((__isset.DateTimeWhenRelacionWasCreated == other.__isset.DateTimeWhenRelacionWasCreated) && ((!__isset.DateTimeWhenRelacionWasCreated) || (global::System.Object.Equals(DateTimeWhenRelacionWasCreated, other.DateTimeWhenRelacionWasCreated))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((IdFriend != null) && __isset.idFriend)
        {
          hashcode = (hashcode * 397) + IdFriend.GetHashCode();
        }
        if((IdUser1 != null) && __isset.idUser1)
        {
          hashcode = (hashcode * 397) + IdUser1.GetHashCode();
        }
        if((IdUser2 != null) && __isset.idUser2)
        {
          hashcode = (hashcode * 397) + IdUser2.GetHashCode();
        }
        if((DateTimeWhenRelacionWasCreated != null) && __isset.DateTimeWhenRelacionWasCreated)
        {
          hashcode = (hashcode * 397) + DateTimeWhenRelacionWasCreated.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp18 = new StringBuilder("Friend(");
      int tmp19 = 0;
      if((IdFriend != null) && __isset.idFriend)
      {
        if(0 < tmp19++) { tmp18.Append(", "); }
        tmp18.Append("IdFriend: ");
        IdFriend.ToString(tmp18);
      }
      if((IdUser1 != null) && __isset.idUser1)
      {
        if(0 < tmp19++) { tmp18.Append(", "); }
        tmp18.Append("IdUser1: ");
        IdUser1.ToString(tmp18);
      }
      if((IdUser2 != null) && __isset.idUser2)
      {
        if(0 < tmp19++) { tmp18.Append(", "); }
        tmp18.Append("IdUser2: ");
        IdUser2.ToString(tmp18);
      }
      if((DateTimeWhenRelacionWasCreated != null) && __isset.DateTimeWhenRelacionWasCreated)
      {
        if(0 < tmp19++) { tmp18.Append(", "); }
        tmp18.Append("DateTimeWhenRelacionWasCreated: ");
        DateTimeWhenRelacionWasCreated.ToString(tmp18);
      }
      tmp18.Append(')');
      return tmp18.ToString();
    }
  }

}
